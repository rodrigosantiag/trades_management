openapi: 3.0.0
info:
  title: Trades Management API
  description: Provides several endpoints to create, update and remove several system's resources like brokers, accounts, etc.
  version: 0.1.0
servers:
  - url: http://127.0.0.1:3000
    description: Local server
  - url: https://a6ry2uj396.execute-api.us-east-1.amazonaws.com/v1
    description: Development server
paths:
  /brokers:
    post:
      summary: Create broker
      description: Create a new broker
      requestBody:
        description: Broker payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrokerRequest"
            examples:
              request:
                $ref: "#/components/examples/BrokerRequest"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceCreated"
              example:
                uid: "A3520D74-A9D6-4B20-AC1B-3424F6AD9EB9"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/BrokerValidation"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  $ref: "#/components/examples/Unauthorized"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/InternalServerError"
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateBroker.Arn}/invocations"
    get:
      summary: Get brokers
      description: List user's brokers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListBrokersResponse"
              examples:
                user_with_no_broker:
                  $ref: "#/components/examples/UserWithNoBroker"
                user_with_brokers_no_account:
                  $ref: "#/components/examples/UserWithBrokerNoAccount"
                user_with_brokers_and_acocunts:
                  $ref: "#/components/examples/UserWithBrokerAndAccount"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/BrokerValidation"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  $ref: "#/components/examples/Unauthorized"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/InternalServerError"
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListBrokers.Arn}/invocations"
  /brokers/{uuid}:
    patch:
      summary: Update broker
      description: Update an existing broker
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Broker UUID
      requestBody:
        description: Broker update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrokerUpdateRequest"
            examples:
              request:
                $ref: "#/components/examples/BrokerUpdateRequest"
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrokerResourceUpdated"
              examples:
                with_accounts_updated:
                  $ref: "#/components/examples/BrokerWithAccountsUpdatedResponse"
                without_accounts_updated:
                  $ref: "#/components/examples/BrokerWithoutAccountsUpdatedResponse"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/BrokerValidation"
                generic_error:
                  $ref: "#/components/examples/GenericErrorExample"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  $ref: "#/components/examples/Unauthorized"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/InternalServerError"
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateBroker.Arn}/invocations"
    delete:
      summary: Delete broker
      description: Delete broker
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Broker UUID
      responses:
        204:
          description: Deleted
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
              examples:
                not_found:
                  $ref: "#/components/examples/GenericErrorExample"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  $ref: "#/components/examples/Unauthorized"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/InternalServerError"
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteBroker.Arn}/invocations"
  /accounts:
    post:
      summary: Create account
      description: Create a new account
      requestBody:
        description: Account payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountRequest"
            examples:
              request:
                $ref: "#/components/examples/AccountRequest"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceCreated"
              example:
                uid: "e13a2e3c-44b2-41bc-8d4b-72356358221c"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/AccountValidation"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  $ref: "#/components/examples/Unauthorized"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                internal_server_error:
                  $ref: "#/components/examples/InternalServerError"
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateAccount.Arn}/invocations"
    get:
      summary: List accounts
      description: List user's accounts
      parameters:
        - in: query
          name: broker_uid
          required: false
          schema:
            type: string
            format: uid
          description: Broker UUID to filter accounts from this broker
        - in: query
          name: type_account
          required: false
          schema:
            $ref: "#/components/schemas/TypeAccount"
          description: Type of account used to filter accounts of that type. Use "R" for real accounts or "D" for demo accounts
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAccountsResponse"
              examples:
                user_with_accounts:
                  $ref: "#/components/examples/UserWithAccounts"
                user_with_no_accounts:
                  $ref: "#/components/examples/UserWithNoAccounts"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  $ref: "#/components/examples/Unauthorized"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/InternalServerError"
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListAccounts.Arn}/invocations"
  /accounts/{uuid}:
    get:
      summary: Get account
      description: Get user account
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Account UUID to get info for
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  broker_uuid:
                    type: string
                    format: uuid
                  type_account:
                    type: string
                  currency:
                    type: string
                  initial_balance:
                    type: number
              example:
                broker_uid: edb0a18d-4f7b-4a6f-8189-95b515e22a9d
                type_account: R
                currency: USD
                initial_balance: 500.0
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  $ref: "#/components/examples/Unauthorized"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                not_found:
                  $ref: "#/components/examples/NotFound"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/InternalServerError"
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAccount.Arn}/invocations"
    patch:
      summary: Update account
      description: Update an existing account
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Account UUID
      requestBody:
        description: Account update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountUpdateRequest"
            examples:
              request:
                $ref: "#/components/examples/AccountUpdateRequest"
      responses:
        204:
          description: Account updated
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/BrokerValidation"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  $ref: "#/components/examples/Unauthorized"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/InternalServerError"
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateAccount.Arn}/invocations"
    delete:
      summary: Delete account
      description: Delete account
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Account UUID
      responses:
        204:
          description: Deleted
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/GenericErrorExample"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  $ref: "#/components/examples/Unauthorized"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                bad_request:
                  $ref: "#/components/examples/InternalServerError"
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteAccount.Arn}/invocations"

components:
  schemas:
    BrokerRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    BrokerUpdateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    AccountUpdateRequest:
      type: object
      required:
        - type_account
        - currency
        - initial_balance
        - broker_id
      properties:
        type_account:
          $ref: "#/components/schemas/TypeAccount"
        currency:
          type: string
        initial_balance:
          type: number
        broker_id:
          type: string
          format: uuid
    ResourceCreated:
      type: object
      properties:
        uid:
          type: string
          format: uid
    BrokerResourceUpdated:
      type: object
      properties:
        uid:
          type: string
          format: uid
        name:
          type: string
        accounts:
          type: array
          items:
            type: object
            properties:
              uid:
                type: string
                format: uid
              type_account:
                type: string
              currency:
                type: string
              initial_balance:
                type: number
              current_balance:
                type: number
    AccountRequest:
      type: object
      required:
        - type_account
        - currency
        - initial_balance
        - broker_uid
      properties:
        type_account:
          $ref: "#/components/schemas/TypeAccount"
        currency:
          type: string
        initial_balance:
          type: number
        broker_uid:
          type: string
          format: uid
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              messages:
                type: array
                items:
                  type: string
              trace_id:
                type: string
                format: uuid
    ListBrokersResponse:
      type: object
      properties:
        brokers:
          type: array
          items:
            type: object
            properties:
              uid:
                type: string
                format: uid
              name:
                type: string
              accounts:
                type: array
                items:
                  type: object
                  properties:
                    uid:
                      type: string
                      format: uid
                    type_account:
                      type: string
                    currency:
                      type: string
                    initial_balance:
                      type: number
                    current_balance:
                      type: number
    ListAccountsResponse:
      type: object
      properties:
        accounts:
          type: array
          items:
            type: object
            properties:
              uid:
                type: string
                format: uid
              type_account:
                type: string
              currency:
                type: string
              initial_balance:
                type: number
              current_balance:
                type: number
              broker:
                type: object
                properties:
                  name:
                    type: string
    TypeAccount:
      type: string
      enum:
        - D
        - R
    GenericErrorResponse:
      type: object
      properties:
        error:
          type: string

  examples:
    GenericErrorExample:
      summary: Generic error
      value:
        error: Some error message
    Unauthorized:
      summary: Unauthorized
      value:
        errors:
          - type: unauthorized
            messages: [ "Invalid token" ]
            trace_id: "C3D3DB61-D98F-4839-AC95-D5A2AA14ACFF"
    NotFound:
      summary: Not Found
      value:
        errors:
          - type: not_found
            messages: [ "Resource not found" ]
            trace_id: "C3D3DB61-D98F-4839-AC95-D5A2AA14ACFF"
    InternalServerError:
      summary: Internal Server Error
      value:
        errors:
          - type: network_error
            messages: [ "Internal server error" ]
            trace_id: "C3D3DB61-D98F-4839-AC95-D5A2AA14ACFF"
    BrokerRequest:
      summary: Broker request
      value:
        name: "Forex Broker"
    BrokerUpdateRequest:
      summary: Broker update request
      value:
        name: "Forex Broker Updated"
    BrokerValidation:
      summary: BadRequest
      value:
        errors:
          - type: invalid_request
            messages: [ "'name' is a required field" ]
            trace_id: "C3D3DB61-D98F-4839-AC95-D5A2AA14ACFF"
    BrokerWithAccountsUpdatedResponse:
      summary: Broker with accounts updated
      value:
        uid: "E160D0D9-2B1D-471E-BA80-FD6A98755B15"
        name: "Forex Broker Updated"
        accounts:
          - uid: "B2355B88-CB7D-45DF-BE18-50CB83029343"
            type_account: "D"
            currency: "USD"
            initial_balance: 10000.0
            current_balance: 10000.0
          - uid: "3A30F3A3-7328-477D-8CE5-7C18253D04EB"
            type_account: "R"
            currency: "BRL"
            initial_balance: 1000.0
            current_balance: 2000.0
    BrokerWithoutAccountsUpdatedResponse:
      summary: Broker without accounts updated
      value:
        uid: "E160D0D9-2B1D-471E-BA80-FD6A98755B15"
        name: "Forex Broker Updated"
        accounts: [ ]
    UserWithNoBroker:
      summary: User which have no brokers associated to
      value:
        brokers: [ ]
    UserWithBrokerNoAccount:
      summary: User with broker associated to but this broker has no accounts
      value:
        brokers:
          - uid: "29EAF90E-0019-4B42-969E-E6F92EE7B3B7"
            name: "Broker Name Example"
            accounts: [ ]
    UserWithBrokerAndAccount:
      summary: User with broker associated to and this broker has accounts associated to it
      value:
        brokers:
          - uid: "29EAF90E-0019-4B42-969E-E6F92EE7B3B7"
            name: "Broker Name Example"
            accounts:
              - uid: "086FCEE7-88A3-4CAF-A312-3B63AE6FB2D1"
                type_account: "D"
                currency: "USD"
                initial_balance: 10000.0
                current_balance: 50000.0
              - uid: "086FCEE7-88A3-4CAF-A312-3B63AE6FB2D1"
                type_account: "R"
                currency: "USD"
                initial_balance: 100.0
                current_balance: 500.0
    AccountRequest:
      summary: Account request
      value:
        type_account: "R"
        currency: "USD"
        initial_balance: 100.0
        broker_uid: "5e371f58-b6b1-4e58-99de-24c279f4e24e"
    AccountUpdateRequest:
      summary: Account update request
      value:
        type_account: "D"
        currency: "EUR"
        initial_balance: 10000.0
        broker_id: "5e371f58-b6b1-4e58-99de-24c279f4e24e"
    AccountValidation:
      summary: Account bad request
      value:
        errors:
          - type: invalid_request
            messages: [ "'type_account' is a required field" ]
            trace_id: "4a399e08-4cb2-4b96-a6f2-be84383ea90e"
    UserWithAccounts:
      summary: User with accounts
      value:
        accounts:
          - uid: "b9b52eac-3510-4c5f-8a2b-127b2dc22b9b"
            type_account: "R"
            currency: "USD"
            initial_balance: 100.0
            current_balance: 100.0
            broker:
              name: "Broker gtest"
    UserWithNoAccounts:
      summary: User with no accounts
      value:
        accounts: [ ]

  securitySchemes:
    Authorizer:
      type: apiKey
      in: header
      name: authorization
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: request
        identitySource: method.request.header.authorization
        authorizerUri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations"
        authorizerCredentials:
          Fn::GetAtt: ApiGatewayRole.Arn
        authorizerResultTtlInSeconds: 600
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

security:
  - Authorizer: [ ]

# Amazon API gateway OpenApi integration
x-amazon-apigateway-request-validator: all

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true

x-amazon-apigateway-cors:
  allowOrigins:
    - "*"
  allowMethods:
    - "OPTIONS"
    - "POST"
    - "GET"
  allowHeaders:
    - "x-api-key"
    - "content-type"
    - "authorization"
