AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Trades Management

Parameters:
  Environment:
    Type: AWS::SSM::Parameter::Value<String>
    Default: SantiveEnvironment
  PrivateSubnets:
    Type: AWS::SSM::Parameter::Value<List<String>>
    Default: PrivateSubnets
  PrivateSecurityGroups:
    Type: AWS::SSM::Parameter::Value<List<String>>
    Default: PrivateSecurityGroups

Mappings:
  Environments:
    development:
      LogLevel: DEBUG
      DatabaseSecret: "parameters:///trades-management/database_url"
      jwksDomain: "parameters:///trades-management/jwks_domain"
      apiAudience: "parameters:///trades-management/api_audience"
    production:
      LogLevel: ERROR
      DatabaseSecret: "parameters:///trades-management/database_url"
      jwksDomain: "parameters:///trades-management/jwks_domain"
      apiAudience: "parameters:///trades-management/api_audience"

Globals:
  Function:
    Runtime: python3.8
    Timeout: 30
    MemorySize: 256
    Layers:
      - Ref: TradesManagementDepLayer
    VpcConfig:
      SecurityGroupIds:
        Ref: PrivateSecurityGroups
      SubnetIds:
        Ref: PrivateSubnets
    Environment:
      Variables:
        ENVIRONMENT:
          Ref: Environment
        LOG_LEVEL:
          Fn::FindInMap:
            - Environments
            - Ref: Environment
            - LogLevel
        DATABASE_URL:
          Fn::FindInMap:
            - Environments
            - Ref: Environment
            - DatabaseSecret
        SENTRY_DSN: "https://e186ded0d7c64d029628fad2a9c92218@o1155645.ingest.sentry.io/6236195"

Resources:
  TradesManagementDepLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sam-trades-management-dependencies
      Description: Python dependencies
      ContentUri: .aws-sam/dependencies
      LicenseInfo: "MIT"
      CompatibleRuntimes:
        - python3.8

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: trades-management-api
      StageName: v1
      DefinitionBody:
        Fn::Transform:
          Name: "AWS::Include"
          Parameters:
            Location: "./swagger.yml"

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiGatewayv1Stage
    Properties:
      ApiStages:
        - ApiId:
            Ref: ApiGateway
          Stage:
            Fn::Sub: v1
      Description: Unlimited usage plan for trades-management
      UsagePlanName: TradesManagementApi_Unlimited

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "InvokeAuthorizerFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: !GetAtt AuthorizerFunction.Arn



  # Lambda

  Migrate:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 90
      FunctionName: trades-management-migrations
      CodeUri: migrations
      Handler: serpens.migrations.migrate_handler
      Policies:
        - AWSLambda_FullAccess
        - AmazonSSMFullAccess

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: trades-management-authorizer
      CodeUri: trades_management
      Handler: handlers.authorize.handle
      Policies:
        - AWSLambda_FullAccess
        - AmazonSSMReadOnlyAccess
      Environment:
        Variables:
          JWKS_DOMAIN:
            Fn::FindInMap:
              - Environments
              - Ref: Environment
              - jwksDomain
          API_AUDIENCE:
            Fn::FindInMap:
              - Environments
              - Ref: Environment
              - apiAudience

  CreateBroker:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: trades-management-create-broker
      CodeUri: trades_management
      Handler: handlers.create_broker.handle
      Policies:
        - AWSLambda_FullAccess
        - AmazonSSMReadOnlyAccess
        - AmazonRDSFullAccess
      Events:
        PostBroker:
          Type: Api
          Properties:
            Path: /brokers
            Method: post
            RestApiId:
              Ref: ApiGateway

  UpdateBroker:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: trades-management-update-broker
      CodeUri: trades_management
      Handler: handlers.update_broker.handle
      Policies:
        - AWSLambda_FullAccess
        - AmazonSSMReadOnlyAccess
        - AmazonRDSFullAccess
      Events:
        PutBroker:
          Type: Api
          Properties:
            Path: /brokers
            Method: put
            RestApiId:
              Ref: ApiGateway

  DeleteBroker:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: trades-management-delete-broker
      CodeUri: trades_management
      Handler: handlers.delete_broker.handle
      Policies:
        - AWSLambda_FullAccess
        - AmazonSSMReadOnlyAccess
        - AmazonRDSFullAccess
      Events:
        DeleteBroker:
          Type: Api
          Properties:
            Path: /brokers/{uuid}
            Method: delete
            RestApiId:
              Ref: ApiGateway

  ListBrokers:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: trades-management-list-brokers
      CodeUri: trades_management
      Handler: handlers.list_brokers.handle
      Policies:
        - AWSLambda_FullAccess
        - AmazonSSMReadOnlyAccess
        - AmazonRDSFullAccess
      Events:
        ListBrokers:
          Type: Api
          Properties:
            Path: /brokers
            Method: get
            RestApiId:
              Ref: ApiGateway
